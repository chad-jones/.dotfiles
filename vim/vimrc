set runtimepath+=~/.vim_runtime
set encoding=UTF-8

""""""""""""""""""""""""""""""
" =>  blacklist pathogen plugins
""""""""""""""""""""""""""""""
let g:pathogen_disabled = []
call add(g:pathogen_disabled, 'ctrlp.vim')

""""""""""""""""""""""""""""""
" =>  source amix/vimrc
""""""""""""""""""""""""""""""
source ~/.vim_runtime/vimrcs/basic.vim
source ~/.vim_runtime/vimrcs/filetypes.vim
source ~/.vim_runtime/vimrcs/plugins_config.vim
source ~/.vim_runtime/vimrcs/extended.vim

""""""""""""""""""""""""""""""
" => base16
""""""""""""""""""""""""""""""
set termguicolors
if filereadable(expand('~/.vimrc_background'))
  " let base16colorspace=256
  source ~/.vimrc_background
endif

""""""""""""""""""""""""""""""
" =>  line numbers
""""""""""""""""""""""""""""""
:set number relativenumber
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" # horizontal split below instead of above
set splitbelow
set splitright

""""""""""""""""""""""""""""""
" =>  tabs
""""""""""""""""""""""""""""""
set expandtab
set shiftwidth=2
set softtabstop=2

""""""""""""""""""""""""""""""
" => lightline
""""""""""""""""""""""""""""""
let g:lightline = {
\ 'colorscheme': 'wombat',
\ 'active': {
\   'left': [['mode', 'paste'], ['readonly', 'relativepath', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok', 'fileformat', 'filetype']]
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_function': {
\   'filetype': 'MyFiletype',
\   'fileformat': 'MyFileformat',
\ },
\ 'component_type': {
\   'linter_checking': 'left',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error',
\   'linter_ok': 'left',
\ },
\ }
function! LightlineLinterChecking() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf("%d \uf110", all_non_errors)
endfunction
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf("%d \uf071", all_non_errors)
endfunction
function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf("%d \uf05e", all_errors)
endfunction
function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? "\uf00c " : ''
endfunction

" " lightline devicons functions
function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

""""""""""""""""""""""""""""""
" => devicons
""""""""""""""""""""""""""""""
" enable folder/directory glyph flag (disabled by default with 0)
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" enable open and close folder/directory glyph flags (disabled by default with 0)
let g:DevIconsEnableFoldersOpenClose = 1

""""""""""""""""""""""""""""""
" => OS specific
""""""""""""""""""""""""""""""
let uname = substitute(system('uname'), '\n', '', '')
if uname == 'Darwin'
	" use the clipboard
	:set clipboard=unnamed  " use the clipboards of vim and win
    " devicons
    let g:WebDevIconsOS = 'Darwin'
    " change cursor based on mode
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    " fzf If installed using Homebrew
    set rtp+=/usr/local/opt/fzf

elseif uname == 'Linux'
	" use the clipboard
	:set clipboard=unnamed  " use the clipboards of vim and win
	:set go=a               " Visual selection auto copied to the clipboard
    " change cursor based on mode
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
    " deoplete python host
    let g:python_host_prog = '/usr/bin/python2'
    let g:python3_host_prog = '/usr/bin/python3'
endif

""""""""""""""""""""""""""""""
" => fzf
""""""""""""""""""""""""""""""
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)
" File finder
nmap <Leader>f :GFiles<CR>
nmap <Leader>F :Files<CR>
" Buffer finder
nmap <Leader>h :History<CR>
" Tag finder
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
" Line finder
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>
nmap <Leader>' :Marks<CR>
" Project Finder
nmap <Leader>ag :Ag<Space>
nmap <Leader>rg :Rg<CR>
" Help finder
nmap <Leader>H :Helptags!<CR>

""""""""""""""""""""""""""""""
" => NERDTree
""""""""""""""""""""""""""""""
" toggle on open file
let g:NERDTreeQuitOnOpen = 1
autocmd StdinReadPre * let s:std_in=1
" exit if NERDTree is the last buffer
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" minimal UI
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1

""""""""""""""""""""""""""""""
" => deoplete
""""""""""""""""""""""""""""""
" enable deoplete a startup
let g:deoplete#enable_at_startup = 1
" auto close completion popup after successful completion
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" tab completion
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()

""""""""""""""""""""""""""""""
" =>  GitGutter
""""""""""""""""""""""""""""""
let g:gitgutter_grep_command = 'rg --hidden --follow --glob "!.git/*"'
let g:gitgutter_enabled = 1

""""""""""""""""""""""""""""""
" =>  ALE
""""""""""""""""""""""""""""""
let g:ale_sign_warning = "\uf071"
let g:ale_sign_error = "\uf05e"
highlight link ALEWarningSign String
highlight link ALEErrorSign Title
nmap ]w :ALENextWrap<CR>
nmap [w :ALEPreviousWrap<CR>
nmap <Leader>af <Plug>(ale_fix)
augroup VimDiff
  autocmd!
  autocmd VimEnter,FilterWritePre * if &diff | ALEDisable | endif
augroup END
""""""""""""""""""""""""""""""
" =>  mouse support
""""""""""""""""""""""""""""""
:set mouse=a
:set ttymouse=xterm2


""""""""""""""""""""""""""""""
" =>  better split navigation
""""""""""""""""""""""""""""""
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

""""""""""""""""""""""""""""""
" => key bindings
""""""""""""""""""""""""""""""
" remap esc to `jj`
:imap jj <Esc>
